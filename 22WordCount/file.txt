Node.js works by leveraging an event-driven, non-blocking I/O model, making it highly efficient and scalable, especially for applications that require handling many concurrent connections. Here’s how it works:

1. Single-Threaded Event Loop
Node.js operates on a single-threaded event loop model. Unlike traditional server architectures, where each request might spawn a new thread (which can be inefficient), Node.js uses a single thread to handle multiple requests concurrently.

2. Event-Driven
Node.js is event-driven, meaning it uses events to manage and handle different types of I/O operations like reading files, querying databases, or making HTTP requests. When an operation completes, it emits an event, and the corresponding callback is executed. This is in contrast to blocking models, where the program waits for an operation to finish before moving to the next one.

3. Non-Blocking I/O
The most important feature of Node.js is its non-blocking I/O. This means that while Node.js handles one request, it can continue processing other incoming requests rather than waiting for an operation (like file reading or database query) to finish. This is especially useful for applications that need to process many requests simultaneously, such as real-time applications, APIs, or chat systems.

4. V8 JavaScript Engine
Node.js uses the V8 JavaScript engine (the same engine used by Chrome) to execute JavaScript code. V8 compiles JavaScript into native machine code for performance, making it fast and efficient.

5. Libuv and Event Loop
Node.js uses the libuv library for handling the event loop and performing asynchronous I/O operations. Libuv provides cross-platform support for asynchronous file and network operations, and it helps manage the event loop and thread pool.

6. Callback Functions
Node.js relies heavily on callbacks for managing asynchronous operations. When a task is complete, it invokes a callback function. This callback model ensures that Node.js can continue processing without blocking, even when performing tasks like reading from disk or making a database call.

7. Thread Pool for Heavy I/O Operations
Though Node.js uses a single thread for the event loop, it can delegate heavy, blocking I/O operations (like file system access) to a thread pool managed by libuv. This allows Node.js to still be efficient and handle non-blocking tasks without getting bogged down by blocking operations.

Node.js Workflow Example:
Request Handling: A client sends a request to a Node.js server.

Event Loop: The request enters the event loop, which checks whether there’s a callback to be executed.

Non-Blocking I/O: If the server needs to read a file or query a database, the I/O operation is performed asynchronously. Node.js doesn’t block other requests while waiting for these operations.

Callbacks: When the I/O operation completes, Node.js triggers the corresponding callback function, and the response is sent back to the client.